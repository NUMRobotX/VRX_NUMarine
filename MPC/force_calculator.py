import numpy as np
from scipy.interpolate import interp1d

class ForceCalculator:
    def __init__(self):
        self.pwm_force_data = [
            (1100, -10.31), (1104, -10.21), (1108, -10.11), (1112, -10.01), (1116, -9.91),
            (1120, -9.81), (1124, -9.71), (1128, -9.61), (1132, -9.51), (1136, -9.39),
            (1140, -9.28), (1144, -9.18), (1148, -9.07), (1152, -8.97), (1156, -8.83),
            (1160, -8.70), (1164, -8.57), (1168, -8.45), (1172, -8.33), (1176, -8.21),
            (1180, -8.08), (1184, -7.95), (1188, -7.81), (1192, -7.67), (1196, -7.54),
            (1200, -7.41), (1204, -7.29), (1208, -7.16), (1212, -7.02), (1216, -6.89),
            (1220, -6.77), (1224, -6.66), (1228, -6.54), (1232, -6.42), (1236, -6.29),
            (1240, -6.16), (1244, -6.03), (1248, -5.90), (1252, -5.79), (1256, -5.68),
            (1260, -5.56), (1264, -5.43), (1268, -5.30), (1272, -5.16), (1276, -5.04),
            (1280, -4.92), (1284, -4.80), (1288, -4.67), (1292, -4.55), (1296, -4.43),
            (1300, -4.30), (1304, -4.18), (1308, -4.06), (1312, -3.95), (1316, -3.84),
            (1320, -3.71), (1324, -3.60), (1328, -3.49), (1332, -3.39), (1336, -3.29),
            (1340, -3.19), (1344, -3.08), (1348, -2.98), (1352, -2.88), (1356, -2.79),
            (1360, -2.69), (1364, -2.60), (1368, -2.50), (1372, -2.41), (1376, -2.32),
            (1380, -2.23), (1384, -2.13), (1388, -2.04), (1392, -1.94), (1396, -1.85),
            (1400, -1.75), (1404, -1.65), (1408, -1.55), (1412, -1.46), (1416, -1.37),
            (1420, -1.28), (1424, -1.19), (1428, -1.11), (1432, -1.02), (1436, -0.94),
            (1440, -0.86), (1444, -0.78), (1448, -0.70), (1452, -0.62), (1456, -0.55),
            (1460, -0.47), (1464, -0.39), (1468, -0.31), (1472, -0.23), (1476, -0.16),
            (1480, 0.00), (1484, 0.00), (1488, 0.00), (1492, 0.00), (1496, 0.00),
            (1500, 0.00), (1504, 0.00), (1508, 0.00), (1512, 0.00), (1516, 0.00),
            (1520, 0.00), (1524, 0.26), (1528, 0.37), (1532, 0.49), (1536, 0.60),
            (1540, 0.71), (1544, 0.83), (1548, 0.94), (1552, 1.05), (1556, 1.17),
            (1560, 1.28), (1564, 1.41), (1568, 1.53), (1572, 1.66), (1576, 1.79),
            (1580, 1.92), (1584, 2.05), (1588, 2.19), (1592, 2.32), (1596, 2.47),
            (1600, 2.62), (1604, 2.77), (1608, 2.90), (1612, 3.03), (1616, 3.16),
            (1620, 3.30), (1624, 3.43), (1628, 3.56), (1632, 3.70), (1636, 3.83),
            (1640, 3.97), (1644, 4.12), (1648, 4.26), (1652, 4.40), (1656, 4.56),
            (1660, 4.71), (1664, 4.86), (1668, 5.01), (1672, 5.17), (1676, 5.35),
            (1680, 5.53), (1684, 5.70), (1688, 5.88), (1692, 6.06), (1696, 6.24),
            (1700, 6.43), (1704, 6.62), (1708, 6.81), (1712, 7.00), (1716, 7.20),
            (1720, 7.39), (1724, 7.58), (1728, 7.77), (1732, 7.96), (1736, 8.15),
            (1740, 8.35), (1744, 8.54), (1748, 8.75), (1752, 8.95), (1756, 9.15),
            (1760, 9.35), (1764, 9.55), (1768, 9.76), (1772, 9.95), (1776, 10.15),
            (1780, 10.35), (1784, 10.56), (1788, 10.77), (1792, 10.98), (1796, 11.19),
            (1800, 11.41), (1804, 11.62), (1808, 11.83), (1812, 12.04), (1816, 12.24),
            (1820, 12.45), (1824, 12.65), (1828, 12.85), (1832, 13.06), (1836, 13.26),
            (1840, 13.48), (1844, 13.70), (1848, 13.91), (1852, 14.11), (1856, 14.31),
            (1860, 14.49), (1864, 14.69), (1868, 14.88), (1872, 15.07), (1876, 15.27),
            (1880, 15.46), (1884, 15.66), (1888, 15.85), (1892, 16.05), (1896, 16.24),
            (1900, 16.44)
        ]

    # Normalize signal to PWM range
    def normalize_signal_to_pwm(self, signal):
        pwm_min = 1100
        pwm_max = 1900
        signal_min = -100
        signal_max = 100

        pwm_value = ((signal - signal_min) * (pwm_max - pwm_min) / (signal_max - signal_min)) + pwm_min
        return pwm_value

    # Interpolate force from PWM data
    def interpolate_force_from_pwm(self, pwm):
        pwm_values = [data_point[0] for data_point in self.pwm_force_data]
        force_values = [data_point[1] for data_point in self.pwm_force_data]

        interpolation_function = interp1d(pwm_values, force_values, kind='linear', fill_value="extrapolate")
        force = interpolation_function(pwm)
        return force

    # Get force from signal
    def get_force_from_signal(self, signal):
        pwm_value = self.normalize_signal_to_pwm(signal)
        force = self.interpolate_force_from_pwm(pwm_value)*9.80665
        return force


